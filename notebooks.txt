[CLI]
-t (pseudo-tty) - simulates a shell terminal, like ssh does
-i (interactive) - keeps the session open to receive terminal commands
-a (attach) - same as -t but with to start stopped containers

[NETWORK]
Containers can actualy talk to each other through their private network, but they need to
specify a public host to be able to talk with another container(which have already a exposed public port)
that its not on the same private network.

**DNS
Docker uses the container names as DNS's to talk to each other

[IMAGE]
Bunch of app binaries, dependencies, metadata and how to run your container.
DockerHub -> default repository to download open source images.

**LAYERS
Every command on some build image will create a unique layer with a ID, which
can be used multiple times without create another one every time a image is build
with the same previous commands.

**TAGS
The same image ID can have multiple tags attached to it, but these tags doesn't mean
that they will change the image ID.

**DOCKERFILE
Each RUN command creates a new image layer, so when we run multiple commands it's a good pratice
chain then with the keyword '&&', creating one unique layer given many commands as we want.
Example:
    """RUN apt-get update \"""
    """&& apt-get install docker \"""
    """&& apt-get install docker-compose"""

[PERSISTENT DATA]

**VOLUMES
The docker way to persist the container data event if the container is removed.


**NAMES VOLUMES: friendly way to assign volumes to containers.
Example:
    """docker container run -d -v mysql-db:/var/lib/mysql mysql"""

**BIND MOUTING
Maps a host path(some path on your local machine) to the container given path.

[DOCKER COMPOSE]