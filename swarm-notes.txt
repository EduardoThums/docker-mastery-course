[SWARM]
- Orquestração de containers
- Garantir disponibilidade, escabilidade, deploy blue/green, monitoramento, etc

[Componentes]
- Node: maquinas que rodam os containers
- Stacks: conjunto de servicos se comunicando entre sí
- Services: conceito isolado de algum servico (aglomerado de tasks)
- Tasks: controla/monitora/roda o container

[Node]
- Worker: servem para rodar os containers no clustes
- Manager: 
  - decide onde os containers devem se executados 
  - gerenciam e mantem o cluster disponivel

[Secrets]
- Habilita a criação de variavies dentro do container na pasta tmpfs
- Swarm usa database propria para fazer a manutenção interna das variavies
- Caso não esteja no swarm, por baixo dos panos binda o path do secret com o caminho no container
Ex:
"""echo "senha" | docker secret create senha-db"""
"""docker service --secret  senha-db mysql"""

[Configs]
- Cria as variavies dentro do '/' que ficam salvas no container
Ex:
"""echo "configuracao" | docker config create cgf-db"""
"""docker service --config cgf-db mysql"""

[Network]
- Overlay driver: network drive para container se comunicarem entre hosts diferentes
- Routing Mesh: serve como um load balancer para as services/tasks. Funciona de duas maneiras:
  - Container-to-container: cada service possui um VIP(virtual IP) e distribui para as tasks
  - External-incoming-traffic: publica a port exposta para todos os nodos e redireciona para o nodo que roda o container 

[Stacks]
- Aceita compose files para definir topologias de services/networks/volumes
- "docker stack deploy" ao inves de "docker service create"